import{_ as a,p as e,q as s,a1 as n}from"./framework-5866ffd3.js";const t={},i=n(`<h1 id="webassembly-step-by-step" tabindex="-1"><a class="header-anchor" href="#webassembly-step-by-step" aria-hidden="true">#</a> WebAssembly step-by-step</h1><h4 id="_1-install-webassembly-dev-tools" tabindex="-1"><a class="header-anchor" href="#_1-install-webassembly-dev-tools" aria-hidden="true">#</a> 1. Install WebAssembly Dev Tools</h4><h4 id="_2-compile-a-program-with-debugging-information" tabindex="-1"><a class="header-anchor" href="#_2-compile-a-program-with-debugging-information" aria-hidden="true">#</a> 2. Compile a Program with Debugging Information</h4><p>Write an example:</p><div class="language-c line-numbers-mode" data-ext="c"><pre class="language-c"><code><span class="token comment">// test.c</span>
<span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span><span class="token string">&lt;stdio.h&gt;</span></span>

<span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token keyword">int</span> argc<span class="token punctuation">,</span> <span class="token keyword">char</span> <span class="token operator">*</span>argv<span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">)</span>
<span class="token punctuation">{</span>
  <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">&quot;%s\\n&quot;</span><span class="token punctuation">,</span> <span class="token string">&quot;hello world!&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>Compile code</p><div class="language-dash" data-ext="dash"><pre class="language-dash"><code>emcc -g test.c -fdebug-compilation-dir=&#39;.&#39; -o test.html
</code></pre></div><p>emrun</p><div class="language-dash" data-ext="dash"><pre class="language-dash"><code>emrun --no_browser --port 8000 ./
</code></pre></div><p>Understand the Principle of the Debugger</p><h4 id="_3-turn-on-the-debugger-switch" tabindex="-1"><a class="header-anchor" href="#_3-turn-on-the-debugger-switch" aria-hidden="true">#</a> 3. Turn on the Debugger Switch</h4><p>Open Chrome Debugger &gt; Settings &gt; Experiments -&gt; Search: WebAssembly</p><h4 id="_4-start-debugger" tabindex="-1"><a class="header-anchor" href="#_4-start-debugger" aria-hidden="true">#</a> 4. Start Debugger</h4>`,13),o=[i];function p(r,c){return e(),s("div",null,o)}const d=a(t,[["render",p],["__file","webAssemblyStepByStep.html.vue"]]);export{d as default};
